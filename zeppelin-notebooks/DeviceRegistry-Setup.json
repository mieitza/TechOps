{"paragraphs":[{"text":"val keyId = \"dummy\"\nval secret = \"dummy\"\nsc.hadoopConfiguration.set(\"fs.s3n.awsAccessKeyId\", keyId)\nsc.hadoopConfiguration.set(\"fs.s3n.awsSecretAccessKey\", secret)\nsc.hadoopConfiguration.set(\"fs.s3.impl\", \"org.apache.hadoop.fs.s3native.NativeS3FileSystem\")\n//val fs = \"s3n://hwx-randy/\"\nval fs = \"/Users/randy/demos/techops/data/\"\n\nimport sqlContext.implicits._\nimport org.apache.spark.sql.Row;\nimport org.apache.spark.sql.types.{StructType,StructField,StringType};\nimport java.text.SimpleDateFormat\n\ndef cacheJSON(table: String) :Unit ={\n  val name = table.replace(\"-\", \"_\") + \"_raw\"\n  sqlContext.sql(\"drop table if exists \" + name)\n  sqlContext.read.json(fs+table+\"/*\").createOrReplaceTempView(name+\"_tmp\")\n  sqlContext.sql(\"select input_file_name() as fn, * from \" + name + \"_tmp\").coalesce(1).write.format(\"parquet\")\n    .mode(\"overwrite\").option(\"path\", fs+\"derived/\"+name).saveAsTable(name)\n  println(\"Wrote \" + name + \" to \" + fs+\"derived/\"+name)\n  sqlContext.cacheTable(name)\n  println(\"Cached \" + name)\n  sqlContext.sql(\"drop table \" + name + \"_tmp\")\n}\n\ndef cacheTable(query: String, table: String) :Unit = {\n  sqlContext.sql(\"drop table if exists \" + table)\n  sqlContext.sql(query).coalesce(1).write.format(\"parquet\")\n    .mode(\"overwrite\").option(\"path\", fs+\"derived/\"+table).saveAsTable(table)\n  println(\"Wrote \" + table + \" to \"+fs+\"derived/\"+table)\n  sqlContext.cacheTable(table)\n  println(\"Cached table \"+table)\n}","dateUpdated":"2016-08-17T21:10:26-0400","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160613-132547_1349290144","result":{"code":"SUCCESS","type":"TEXT","msg":"\nkeyId: String = dummy\n\nsecret: String = dummy\n\nfs: String = /Users/randy/demos/techops/data/\n\nimport sqlContext.implicits._\n\nimport org.apache.spark.sql.Row\n\nimport org.apache.spark.sql.types.{StructType, StructField, StringType}\n\nimport java.text.SimpleDateFormat\n\ncacheJSON: (table: String)Unit\n\ncacheTable: (query: String, table: String)Unit\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:26-0400","dateFinished":"2016-08-17T21:10:27-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4041"},{"title":"Parse Raw JSON","text":"cacheJSON(\"nodes\")\ncacheJSON(\"node-health\")\ncacheJSON(\"services\")\ncacheJSON(\"service-health\")","dateUpdated":"2016-08-17T21:10:26-0400","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160618-181558_825401827","result":{"code":"SUCCESS","type":"TEXT","msg":"Wrote nodes_raw to /Users/randy/demos/techops/data/derived/nodes_raw\nCached nodes_raw\nWrote node_health_raw to /Users/randy/demos/techops/data/derived/node_health_raw\nCached node_health_raw\nWrote services_raw to /Users/randy/demos/techops/data/derived/services_raw\nCached services_raw\nWrote service_health_raw to /Users/randy/demos/techops/data/derived/service_health_raw\nCached service_health_raw\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:26-0400","dateFinished":"2016-08-17T21:10:29-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4042"},{"text":"cacheTable(\"\"\"\nselect\n  from_unixtime(split(split(fn, '/')[size(split(fn, '/'))-1], '\\\\.')[0]/1000) as datetime,\n  *\nfrom nodes_raw\n\"\"\", \"nodes\")","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160623-025313_2076088888","result":{"code":"SUCCESS","type":"TEXT","msg":"Wrote nodes to /Users/randy/demos/techops/data/derived/nodes\nCached table nodes\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:28-0400","dateFinished":"2016-08-17T21:10:29-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4043"},{"text":"cacheTable(\"\"\"\nselect datetime, service.service, service.id, b.address, service.port, check.node, check.checkid, check.name, check.status\nfrom\n(select\n  from_unixtime(split(split(fn, '/')[size(split(fn, '/'))-1], '\\\\.')[0]/1000) as datetime,\n  explode(checks) as check,\n  node,\n  service\nfrom service_health_raw) a\nleft outer join (\n  select distinct node, address from nodes\n) b on check.node = b.node\n\"\"\", \"services\")","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160621-040857_468046896","result":{"code":"SUCCESS","type":"TEXT","msg":"Wrote services to /Users/randy/demos/techops/data/derived/services\nCached table services\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:29-0400","dateFinished":"2016-08-17T21:10:30-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4044"},{"text":"//val IP_PATTERN = \"(([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\\\\.){3}([01]?\\\\d\\\\d?|2[0-4]\\\\d|25[0-5])\"\ncase class Log(ts: String, IP: String, log: String)\nval logType = \"web\"\n\nval query = \"\"\"\nselect\n  distinct service, collect_set(concat('?LOCATION', node))\nfrom services\nwhere service = '?SERVICE'\ngroup by service\n\"\"\".replace(\"?LOCATION\", fs+\"host-data/logs/\"+logType+\"/\").replace(\"?SERVICE\", logType)\nsqlContext.sql(query).collect()\n  .map(x => (x.getString(0), x.getSeq[String](1).mkString(\"/*,\"))).map(y => {\n    val name = y._1+\"_logs_raw\"\n    //this represents a source-specific parser for 'web' logs. Supply your own parser for other type logs\n    sc.textFile(y._2).map(_.split(\"\\t\").map(_.trim)).map(z => Log(z(0), z(1), z(2))).coalesce(1).toDF().createOrReplaceTempView(\"web_logs_raw\")\n  })","dateUpdated":"2016-08-17T21:13:52-0400","config":{"tableHide":false,"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160620-071620_1752966747","result":{"code":"SUCCESS","type":"TEXT","msg":"\ndefined class Log\n\nlogType: String = web\n\n\n\n\n\n\n\n\nquery: String =\n\"\nselect\n  distinct service, collect_set(concat('/Users/randy/demos/techops/data/host-data/logs/web/', node))\nfrom services\nwhere service = 'web'\ngroup by service\n\"\n\nres119: Array[Unit] = Array(())\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:29-0400","dateFinished":"2016-08-17T21:10:31-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4045"},{"text":"cacheTable(\"\"\"\nselect\n  from_unixtime(unix_timestamp(ts, \"dd/MMM/yyyy HH:mm:ss\")) as datetime,\n  split(input_file_name(), \"/\")[size(split(input_file_name(), \"/\"))-2] as node,\n  ip as source_ip,\n  log \nfrom web_logs_raw\n\"\"\", \"web_logs\")","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"datetime","index":0,"aggr":"sum"}],"values":[{"name":"node","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"datetime","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160622-231929_821088003","result":{"code":"SUCCESS","type":"TEXT","msg":"Wrote web_logs to /Users/randy/demos/techops/data/derived/web_logs\nCached table web_logs\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:30-0400","dateFinished":"2016-08-17T21:10:31-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4046"},{"text":"cacheTable(\"\"\"\nselect web_logs.datetime, web_logs.node as app_host, source_ip, b.node as source_host, log\nfrom web_logs\nleft outer join (select distinct node, address from nodes) b on source_ip = address\n\"\"\", \"web_logs_enriched\")","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"datetime","index":0,"aggr":"sum"}],"values":[],"groups":[],"scatter":{"xAxis":{"name":"datetime","index":0,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160621-120438_1014423901","result":{"code":"SUCCESS","type":"TEXT","msg":"Wrote web_logs_enriched to /Users/randy/demos/techops/data/derived/web_logs_enriched\nCached table web_logs_enriched\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:31-0400","dateFinished":"2016-08-17T21:10:31-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4047"},{"text":"val nmon_raw = sc.wholeTextFiles(fs+\"host-data/metrics/nmon/*\")\ncase class nmonRec(node: String, ts: String, CPUUser: Double, CPUSys: Double, MemFree: Long, MemAvailable: Long, MemTotal: Long, DiskBusy: Double)\n\nnmon_raw.filter(_._2 contains \"ZZZZ\").map(x => {\n    val lines = x._2.split(\"\\n\")\n    nmonRec(\n      x._1.split(\"/\").last.split(\"_\").head, //node\n      lines.filter(_ contains \"ZZZZ\")(0).split(\",\")(3) + \" \" +\n      lines.filter(_ contains \"ZZZZ\")(0).split(\",\")(2), //timestamp\n      lines.filter(y => y.contains(\"T0001\") && y.startsWith(\"CPU_ALL\"))(0).split(\",\")(2).trim.toDouble, // User CPU\n      lines.filter(y => y.contains(\"T0001\") && y.startsWith(\"CPU_ALL\"))(0).split(\",\")(3).trim.toDouble, // Sys CPU\n      lines.filter(y => y.contains(\"MemFree\"))(0).split(\": \")(1).split(\" kB\")(0).trim.toLong,\n      lines.filter(y => y.contains(\"MemAvailable\"))(0).split(\": \")(1).split(\" kB\")(0).trim.toLong,\n      lines.filter(y => y.contains(\"MemTotal\"))(0).split(\": \")(1).split(\" kB\")(0).trim.toLong,\n      lines.filter(y => y.contains(\"DISKBUSY\"))(1).split(\",\")(2).trim.toDouble\n    )\n}).toDF().coalesce(1).createOrReplaceTempView(\"nmon_raw\")","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160702-193941_1940694652","result":{"code":"SUCCESS","type":"TEXT","msg":"\nnmon_raw: org.apache.spark.rdd.RDD[(String, String)] = /Users/randy/demos/techops/data/host-data/metrics/nmon/* MapPartitionsRDD[1198] at wholeTextFiles at <console>:79\n\ndefined class nmonRec\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:31-0400","dateFinished":"2016-08-17T21:10:32-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4048"},{"text":"cacheTable(\"\"\"\nselect from_unixtime(unix_timestamp(ts, \"dd-MMM-yyyy HH:mm:ss\")) as datetime, node, cpuuser, cpusys, memfree, memavailable, memtotal, diskbusy from nmon_raw\n\"\"\", \"node_monitoring\")","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"datetime","index":0,"aggr":"sum"}],"values":[{"name":"node","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"datetime","index":0,"aggr":"sum"},"yAxis":{"name":"node","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160618-183604_920305267","result":{"code":"SUCCESS","type":"TEXT","msg":"Wrote node_monitoring to /Users/randy/demos/techops/data/derived/node_monitoring\nCached table node_monitoring\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:32-0400","dateFinished":"2016-08-17T21:10:33-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4049"},{"text":"val ps_raw = sc.wholeTextFiles(fs+\"host-data/metrics/ps/*\")\ncase class Process(node: String, ts: Long, user: String, pid: String, CPU: Double, Mem: Double, VSZ: Int, RSS: Int, TTY: String, STAT: String, Start: String, Time: String, Command: String)\n\n//Take the timestamp from filename and prepend it to each row of \"ps\" output\nps_raw.flatMap(x => {\n  val node = x._1.split(\"/\")(x._1.split(\"/\").size - 2)\n  val ts = x._1.split(\"/\").last\n  x._2.split(\"\\n\").drop(1).map(node + \" \" + ts + \" \" + _)\n}).map(y => { \n  val x = y.split(\"\\\\s+\")\n  Process(\n    x(0), x(1).toLong/1000, x(2), x(3), x(4).toDouble, x(5).toDouble, x(6).toInt, x(7).toInt, x(8), x(9), x(10), x(11), x.slice(12, x.size-1).mkString(\" \")\n  )\n}).toDF().coalesce(1).createOrReplaceTempView(\"ps_raw\")\n  \n//TODO - fix timestamp issue","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160711-091209_1121889648","result":{"code":"SUCCESS","type":"TEXT","msg":"\nps_raw: org.apache.spark.rdd.RDD[(String, String)] = /Users/randy/demos/techops/data/host-data/metrics/ps/* MapPartitionsRDD[1214] at wholeTextFiles at <console>:79\n\ndefined class Process\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:32-0400","dateFinished":"2016-08-17T21:10:33-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4050"},{"text":"val ns_raw = sc.wholeTextFiles(fs+\"host-data/metrics/netstat/*\")\ncase class Socket(node: String, ts: Long, Proto: String, RecvQ: Int, SendQ: Int, LocalAddress: String, ForeignAddress: String, State: String, User: String, Inode: String, pid: String, ProgramName: String)\n\n//Take the timestamp from filename and prepend it to each row of \"netstat\" output\nns_raw.flatMap(x => {\n  val node = x._1.split(\"/\")(x._1.split(\"/\").size - 2)\n  val ts = x._1.split(\"/\").last\n  x._2.split(\"\\n\").drop(1).map(node + \" \" + ts + \" \" + _)\n}).filter(x => !(x contains \"Recv-Q\") && !(x contains \"Active UNIX\") && !(x contains \"RefCnt\") && !(x.split(\"\\\\s+\")(2) contains \"unix\") && !(x contains \"Active Internet\"))\n  .map(y => {\n  val x = y.split(\"\\\\s+\")\n  Socket(\n    x(0), x(1).toLong/1000, x(2), x(3).toInt, x(4).toInt, x(5), x(6), x(7), x(8), x(9), if (x.size > 11) x(10) else \"\", if (x.size > 12) x(11) else \"\"\n  )\n})\n.toDF().coalesce(1).createOrReplaceTempView(\"netstat_raw\")\n\ncase class IPCSocket(node: String, ts: Long, Proto: String, RefCnt: Int, Flags: String, Type: String, State: String, Inode: String, pid: String, ProgamName: String, Path: String)\nns_raw.flatMap(x => {\n  val node = x._1.split(\"/\")(x._1.split(\"/\").size - 2)\n  val ts = x._1.split(\"/\").last\n  x._2.split(\"\\n\").drop(1).map(node + \" \" + ts + \" \" + _)\n}).filter(x => x contains \"unix\")\n  .map(y => {\n  val x = y.split(\"\\\\s+\")\n  IPCSocket(\n    x(0), x(1).toLong/1000, x(2), x(3).toInt, x.slice(4,x.size-4).mkString(\" \"), x(x.size-4), x(x.size-3), x(x.size-2), x.last.split(\"/\")(0), x.last.split(\"/\")(1), \"\"\n  )\n})\n.toDF().coalesce(1).createOrReplaceTempView(\"ipcsocket_raw\")\n//TODO - fix timestamp issue","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","editorHide":true,"helium":{},"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[{"name":"ts","index":0,"aggr":"sum"}],"values":[{"name":"_c1","index":1,"aggr":"sum"}],"groups":[],"scatter":{"xAxis":{"name":"ts","index":0,"aggr":"sum"},"yAxis":{"name":"_c1","index":1,"aggr":"sum"}}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160711-094650_1171392473","result":{"code":"SUCCESS","type":"TEXT","msg":"\nns_raw: org.apache.spark.rdd.RDD[(String, String)] = /Users/randy/demos/techops/data/host-data/metrics/netstat/* MapPartitionsRDD[1220] at wholeTextFiles at <console>:79\n\ndefined class Socket\n\ndefined class IPCSocket\n"},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:33-0400","dateFinished":"2016-08-17T21:10:34-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4051"},{"text":"%sql drop table if exists metrics","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/sql","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160817-204939_2135731253","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:34-0400","dateFinished":"2016-08-17T21:10:34-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4052"},{"text":"%sql\ncreate table if not exists metrics as\nselect\n  concat(date_format(datetime, 'yyyy-MM-dd HH:mm'), ':00') as time,\n  round(avg(cpuuser + cpusys)) as CPUUsed,\n  round(avg(diskbusy)) as DISKUsed,\n  round(avg(memavailable/memtotal)*100) as RAMUsed,\n  round(avg(memavailable)/1000) as MemAvailable,\n  sum(b.requests) as InternalRequests,\n  sum(c.requests) as ExternalRequests,\n  sum((b.requests + c.requests)) as TotalRequests\nfrom node_monitoring a\njoin (\n  select\n    date_format(datetime, 'yyyy-MM-dd HH:mm') as time,\n    1 as requests\n  from web_logs_enriched\n  where source_host is not null or source_ip = '127.0.0.1'\n) b on date_format(a.datetime, 'yyyy-MM-dd HH:mm') = b.time\njoin (\n  select \n    date_format(datetime, 'yyyy-MM-dd HH:mm') as time,\n    1 as requests\n  from web_logs_enriched\n  where source_host is null  \n) c on date_format(a.datetime, 'yyyy-MM-dd HH:mm') = c.time\ngroup by date_format(datetime, 'yyyy-MM-dd HH:mm')\norder by time asc","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/sql","editorHide":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160703-012345_2004558290","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:34-0400","dateFinished":"2016-08-17T21:10:35-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4053"},{"text":"","dateUpdated":"2016-08-17T21:10:26-0400","config":{"colWidth":12,"editorMode":"ace/mode/scala","graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1471482211777_-362782356","id":"20160809-190436_699902842","result":{"code":"SUCCESS","type":"TEXT","msg":""},"dateCreated":"2016-08-17T21:03:31-0400","dateStarted":"2016-08-17T21:10:35-0400","dateFinished":"2016-08-17T21:10:35-0400","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:4054"}],"name":"DeviceRegistry-Setup","id":"2BT36EG13","lastReplName":{"value":"sql"},"angularObjects":{"2BQ4DA89C:shared_process":[],"2BQ2F53M6:shared_process":[],"2BSY8XK83:shared_process":[],"2BQQW1DA2:shared_process":[],"2BTD7M9Z7:shared_process":[],"2BRQE418G:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}
{
  "paragraphs": [
    {
      "title": "HTML/Javascript setup",
      "text": "%angular\n\u003c!-- External libraries --\u003e\n\u003cscript type\u003d\"text/javascript\" src\u003d\"http://dygraphs.com/dygraph-combined.js\"\u003e\u003c/script\u003e\n\u003cscript src\u003d\"https://code.highcharts.com/highcharts.js\"\u003e\u003c/script\u003e\n\u003cscript src\u003d\"https://code.highcharts.com/modules/exporting.js\"\u003e\u003c/script\u003e\n\u003cscript src\u003d\"https://cdn.plot.ly/plotly-latest.min.js\"\u003e\u003c/script\u003e\n\n\u003cdiv id\u003d\"dummy\" vars\u003d\"data1,data1Schema,data2,data2Schema\"\u003e\u003c/div\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\n  var div \u003d $(\u0027#dummy\u0027);\n  //Given an element in the note \u0026 list of values to fetch from Spark\n  //window.angularVars.myVal will be current value of backend Spark val of same name\n  function hoist(element, varNames){\n    window.angularVars \u003d {};\n    var scope \u003d angular.element(element.parent(\u0027.ng-scope\u0027)).scope().compiledScope;\n    $.each(varNames, function(i, v){\n      window[v+\u0027-watcher\u0027] \u003d scope.$watch(v, function(newVal, oldVal){\n        console.log(\u0027Setting \u0027 + v + \u0027 to:\\n\u0027);\n        console.log(newVal);\n        window.angularVars[v] \u003d newVal;\n      });\n    });\n  }\n  hoist(div, div.attr(\u0027vars\u0027).split(\u0027,\u0027));\n\u003c/script\u003e",
      "dateUpdated": "Aug 21, 2016 2:24:34 AM",
      "config": {
        "tableHide": true,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160704-174503_870280567",
      "result": {
        "code": "SUCCESS",
        "type": "ANGULAR",
        "msg": "\u003c!-- External libraries --\u003e\n\u003cscript type\u003d\"text/javascript\" src\u003d\"http://dygraphs.com/dygraph-combined.js\"\u003e\u003c/script\u003e\n\u003cscript src\u003d\"https://code.highcharts.com/highcharts.js\"\u003e\u003c/script\u003e\n\u003cscript src\u003d\"https://code.highcharts.com/modules/exporting.js\"\u003e\u003c/script\u003e\n\u003cscript src\u003d\"https://cdn.plot.ly/plotly-latest.min.js\"\u003e\u003c/script\u003e\n\n\u003cdiv id\u003d\"dummy\" vars\u003d\"data1,data1Schema,data2,data2Schema\"\u003e\u003c/div\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\n  var div \u003d $(\u0027#dummy\u0027);\n  //Given an element in the note \u0026 list of values to fetch from Spark\n  //window.angularVars.myVal will be current value of backend Spark val of same name\n  function hoist(element, varNames){\n    window.angularVars \u003d {};\n    var scope \u003d angular.element(element.parent(\u0027.ng-scope\u0027)).scope().compiledScope;\n    $.each(varNames, function(i, v){\n      window[v+\u0027-watcher\u0027] \u003d scope.$watch(v, function(newVal, oldVal){\n        console.log(\u0027Setting \u0027 + v + \u0027 to:\\n\u0027);\n        console.log(newVal);\n        window.angularVars[v] \u003d newVal;\n      });\n    });\n  }\n  hoist(div, div.attr(\u0027vars\u0027).split(\u0027,\u0027));\n\u003c/script\u003e"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 2:24:34 AM",
      "dateFinished": "Aug 21, 2016 2:24:34 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Device Registry Meta",
      "text": "%sql\nselect Datetime, Address as IP, Node, TaggedAddresses\nfrom nodes\nlimit 7",
      "dateUpdated": "Aug 21, 2016 2:24:34 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "Datetime",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "IP",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "Datetime",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160808-144321_1602171126",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "Datetime\tIP\tNode\tTaggedAddresses\n2016-08-20 23:45:18\t172.21.0.5\t01705047a658\t[172.21.0.5]\n2016-08-20 23:45:18\t172.21.0.4\tcb27db12062a\t[172.21.0.4]\n2016-08-20 23:45:18\t172.21.0.3\tmonitor.dev\t[172.21.0.3]\n2016-08-20 23:45:28\t172.21.0.5\t01705047a658\t[172.21.0.5]\n2016-08-20 23:45:28\t172.21.0.4\tcb27db12062a\t[172.21.0.4]\n2016-08-20 23:45:28\t172.21.0.3\tmonitor.dev\t[172.21.0.3]\n2016-08-20 23:45:38\t172.21.0.5\t01705047a658\t[172.21.0.5]\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 2:24:34 AM",
      "dateFinished": "Aug 21, 2016 2:24:35 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Select Host",
      "text": "val nodes \u003d sqlContext.sql(\"select distinct node from nodes\").collect().map(x \u003d\u003e (x(0).asInstanceOf[String], x(0).asInstanceOf[String]))\nval node \u003d z.select(\"node\", nodes)\nval nodeApps \u003d sqlContext.sql(\"select distinct service from services where service !\u003d \u0027consul\u0027 and node \u003d \u0027\"+node+\"\u0027\")\n  .collect().map(x \u003d\u003e (x(0).asInstanceOf[String], x(0).asInstanceOf[String]))\nval app \u003d z.select(\"app\", nodeApps)\nval appTable \u003d app.asInstanceOf[String].replace(\"-\", \"_\")+\"_logs_enriched\"\n\nvar query \u003d \"\"\"\nselect\n concat_ws(\u0027,\u0027, collect_list(date_format(datetime, \u0027HH:mm\u0027))) as time,\n concat_ws(\u0027,\u0027, collect_list(cast(diskbusy as string))) as Disk,\n concat_ws(\u0027,\u0027, collect_list(cast(cpuuser as string))) as CPUUser,\n concat_ws(\u0027,\u0027, collect_list(cast(cpusys as string))) as CPUSys,\n concat_ws(\u0027,\u0027, collect_list(cast(round(cpusys+cpuuser, 2) as string))) as CPU,\n concat_ws(\u0027,\u0027, collect_list(cast(round(100*memavailable/memtotal, 2) as string))) as Mem,\n concat_ws(\u0027,\u0027, collect_list(cast(greatest(app.requests, 0) as string))) as AppEvents,\n concat_ws(\u0027,\u0027, collect_list(cast(round(memavailable/1000, 0) as string))) as MemAvail\nfrom node_monitoring\nleft outer join (\n  select date_format(datetime, \u0027HH:mm\u0027) as time, node, count(*) as requests\n  from \"\"\"+appTable+\"\"\"\n  group by date_format(datetime, \u0027HH:mm\u0027), node\n) app\non node_monitoring.node \u003d app.node and date_format(node_monitoring.datetime, \u0027HH:mm\u0027) \u003d app.time\nwhere node_monitoring.node \u003d \u0027\"\"\"+node+\"\"\"\u0027\ngroup by node_monitoring.node\norder by time asc\n\"\"\"\nprintln(query)\nval data2 \u003d sqlContext.sql(query)\nz.angularBind(\"data2\", data2.collect())\nz.angularBind(\"data2Schema\", data2.schema)\nz.run(\"20160706-130128_836809999\")",
      "dateUpdated": "Aug 21, 2016 3:15:13 AM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {
          "node": "cb27db12062a",
          "app": "web-static"
        },
        "forms": {
          "node": {
            "name": "node",
            "displayName": "node",
            "type": "select",
            "defaultValue": "",
            "options": [
              {
                "value": "01705047a658",
                "displayName": "01705047a658"
              },
              {
                "value": "monitor.dev",
                "displayName": "monitor.dev"
              },
              {
                "value": "cb27db12062a",
                "displayName": "cb27db12062a"
              }
            ],
            "hidden": false
          },
          "app": {
            "name": "app",
            "displayName": "app",
            "type": "select",
            "defaultValue": "",
            "options": [
              {
                "value": "web-static",
                "displayName": "web-static"
              }
            ],
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160706-125955_1152872728",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nnodes: Array[(String, String)] \u003d Array((01705047a658,01705047a658), (monitor.dev,monitor.dev), (cb27db12062a,cb27db12062a))\n\nnode: Object \u003d cb27db12062a\n\nnodeApps: Array[(String, String)] \u003d Array((web-static,web-static))\n\napp: Object \u003d web-static\n\nappTable: String \u003d web_static_logs_enriched\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquery: String \u003d\n\"\nselect\n concat_ws(\u0027,\u0027, collect_list(date_format(datetime, \u0027HH:mm\u0027))) as time,\n concat_ws(\u0027,\u0027, collect_list(cast(diskbusy as string))) as Disk,\n concat_ws(\u0027,\u0027, collect_list(cast(cpuuser as string))) as CPUUser,\n concat_ws(\u0027,\u0027, collect_list(cast(cpusys as string))) as CPUSys,\n concat_ws(\u0027,\u0027, collect_list(cast(round(cpusys+cpuuser, 2) as string))) as CPU,\n concat_ws(\u0027,\u0027, collect_list(cast(round(100*memavailable/memtotal, 2) as string))) as Mem,\n concat_ws(\u0027,\u0027, collect_list(cast(greatest(app.requests, 0) as string))) as AppEvents,\n concat_ws(\u0027,\u0027, collect_list(cast(round(memavailable/1000, 0) as string))) as MemAvail\nfrom node_monitoring\nleft outer join (\n  select date_format(datetime, \u0027HH:mm\u0027) as time, node, count(*) as requests\n  from web_static_logs_enriched\n  group by d...\nselect\n concat_ws(\u0027,\u0027, collect_list(date_format(datetime, \u0027HH:mm\u0027))) as time,\n concat_ws(\u0027,\u0027, collect_list(cast(diskbusy as string))) as Disk,\n concat_ws(\u0027,\u0027, collect_list(cast(cpuuser as string))) as CPUUser,\n concat_ws(\u0027,\u0027, collect_list(cast(cpusys as string))) as CPUSys,\n concat_ws(\u0027,\u0027, collect_list(cast(round(cpusys+cpuuser, 2) as string))) as CPU,\n concat_ws(\u0027,\u0027, collect_list(cast(round(100*memavailable/memtotal, 2) as string))) as Mem,\n concat_ws(\u0027,\u0027, collect_list(cast(greatest(app.requests, 0) as string))) as AppEvents,\n concat_ws(\u0027,\u0027, collect_list(cast(round(memavailable/1000, 0) as string))) as MemAvail\nfrom node_monitoring\nleft outer join (\n  select date_format(datetime, \u0027HH:mm\u0027) as time, node, count(*) as requests\n  from web_static_logs_enriched\n  group by date_format(datetime, \u0027HH:mm\u0027), node\n) app\non node_monitoring.node \u003d app.node and date_format(node_monitoring.datetime, \u0027HH:mm\u0027) \u003d app.time\nwhere node_monitoring.node \u003d \u0027cb27db12062a\u0027\ngroup by node_monitoring.node\norder by time asc\n\n\ndata2: org.apache.spark.sql.DataFrame \u003d [time: string, Disk: string ... 6 more fields]\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 3:15:13 AM",
      "dateFinished": "Aug 21, 2016 3:15:17 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Host/Device View",
      "text": "%angular\n\u003cdiv id\u003d\"chart2\" style\u003d\"min-width: 100%; height: 500px; margin: 0 auto\" data\u003d\"data2\"\u003e\u003c/div\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\nvar div \u003d $(\u0027#chart2\u0027);\nvar data \u003d window.angularVars[div.attr(\u0027data\u0027)][0].values;\nvar schema \u003d window.angularVars[div.attr(\u0027data\u0027)+\u0027Schema\u0027];\n\nvar series \u003d [];\n$.each(schema.fields, function(i, v){\n  if (i \u003e 0){\n    series.push({\n      name: v.name, type: \u0027spline\u0027, yAxis: 0,\n      tooltip: { valueSuffix: \u0027 %\u0027 },\n      data: JSON.parse(\u0027[\u0027+data[i].split(\u0027,\u0027)+\u0027]\u0027)\n    });\n  }\n});\n\nseries[series.length-1].dashStyle \u003d \u0027dot\u0027;\nseries[series.length-1].yAxis \u003d 1;\nseries[series.length-1].tooltip.valueSuffix \u003d \u0027 MB\u0027;\n\nfunction adjustSeries(index, dot){\n  series[index].dashStyle \u003d dot;\n  series[index].yAxis \u003d 2;\n  series[index].tooltip.valueSuffix \u003d \u0027 Hits\u0027;\n}\n\nadjustSeries(series.length - 2, \u0027longDash\u0027);\nadjustSeries(series.length - 3, \u0027shortDash\u0027);\nadjustSeries(series.length - 4, \u0027shortDash\u0027);\n\nvar xAxis \u003d {categories: data[0].split(\u0027,\u0027), crosshair: true};\n\nvar yAxis1 \u003d {\n  labels: { format: \u0027{value} %\u0027, style: { color: Highcharts.getOptions().colors[2] } },\n  title: { text: \u0027Percentage Consumed\u0027, style: { color: Highcharts.getOptions().colors[2] } },\n  opposite: true\n};\n\nvar yAxis2 \u003d {\n  labels: { format: \u0027{value} MB\u0027, style: { color: Highcharts.getOptions().colors[0] } },\n  title: { text: \u0027Memory Available\u0027, style: { color: Highcharts.getOptions().colors[0] } },\n  gridLineWidth: 0\n};\n\nvar yAxis3 \u003d {\n  labels: { format: \u0027{value}\u0027, style: { color: Highcharts.getOptions().colors[0] } },\n  title: { text: \u0027App Events\u0027, style: { color: Highcharts.getOptions().colors[0] } },\n  gridLineWidth: 0,\n  opposite: true\n};\n\nvar legend \u003d {\n  layout: \u0027vertical\u0027, align: \u0027left\u0027, verticalAlign: \u0027top\u0027, floating: true,\n  backgroundColor: (Highcharts.theme \u0026\u0026 Highcharts.theme.legendBackgroundColor) || \u0027#FFFFFF\u0027,\n  x: 80, y: 55\n};\n\n$(\u0027#chart2\u0027).highcharts({\n  chart: { zoomType: \u0027xy\u0027 },\n  title: { text: \u0027Node Metrics:\u0027},\n  xAxis: [xAxis],\n  yAxis: [yAxis1, yAxis2, yAxis3],\n  series: series,\n  legend: legend,\n  tooltip: { shared: true }\n});\n\u003c/script\u003e",
      "dateUpdated": "Aug 21, 2016 2:30:07 AM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160706-130128_836809999",
      "result": {
        "code": "SUCCESS",
        "type": "ANGULAR",
        "msg": "\u003cdiv id\u003d\"chart2\" style\u003d\"min-width: 100%; height: 500px; margin: 0 auto\" data\u003d\"data2\"\u003e\u003c/div\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\nvar div \u003d $(\u0027#chart2\u0027);\nvar data \u003d window.angularVars[div.attr(\u0027data\u0027)][0].values;\nvar schema \u003d window.angularVars[div.attr(\u0027data\u0027)+\u0027Schema\u0027];\n\nvar series \u003d [];\n$.each(schema.fields, function(i, v){\n  if (i \u003e 0){\n    series.push({\n      name: v.name, type: \u0027spline\u0027, yAxis: 0,\n      tooltip: { valueSuffix: \u0027 %\u0027 },\n      data: JSON.parse(\u0027[\u0027+data[i].split(\u0027,\u0027)+\u0027]\u0027)\n    });\n  }\n});\n\nseries[series.length-1].dashStyle \u003d \u0027dot\u0027;\nseries[series.length-1].yAxis \u003d 1;\nseries[series.length-1].tooltip.valueSuffix \u003d \u0027 MB\u0027;\n\nfunction adjustSeries(index, dot){\n  series[index].dashStyle \u003d dot;\n  series[index].yAxis \u003d 2;\n  series[index].tooltip.valueSuffix \u003d \u0027 Hits\u0027;\n}\n\nadjustSeries(series.length - 2, \u0027longDash\u0027);\nadjustSeries(series.length - 3, \u0027shortDash\u0027);\nadjustSeries(series.length - 4, \u0027shortDash\u0027);\n\nvar xAxis \u003d {categories: data[0].split(\u0027,\u0027), crosshair: true};\n\nvar yAxis1 \u003d {\n  labels: { format: \u0027{value} %\u0027, style: { color: Highcharts.getOptions().colors[2] } },\n  title: { text: \u0027Percentage Consumed\u0027, style: { color: Highcharts.getOptions().colors[2] } },\n  opposite: true\n};\n\nvar yAxis2 \u003d {\n  labels: { format: \u0027{value} MB\u0027, style: { color: Highcharts.getOptions().colors[0] } },\n  title: { text: \u0027Memory Available\u0027, style: { color: Highcharts.getOptions().colors[0] } },\n  gridLineWidth: 0\n};\n\nvar yAxis3 \u003d {\n  labels: { format: \u0027{value}\u0027, style: { color: Highcharts.getOptions().colors[0] } },\n  title: { text: \u0027App Events\u0027, style: { color: Highcharts.getOptions().colors[0] } },\n  gridLineWidth: 0,\n  opposite: true\n};\n\nvar legend \u003d {\n  layout: \u0027vertical\u0027, align: \u0027left\u0027, verticalAlign: \u0027top\u0027, floating: true,\n  backgroundColor: (Highcharts.theme \u0026\u0026 Highcharts.theme.legendBackgroundColor) || \u0027#FFFFFF\u0027,\n  x: 80, y: 55\n};\n\n$(\u0027#chart2\u0027).highcharts({\n  chart: { zoomType: \u0027xy\u0027 },\n  title: { text: \u0027Node Metrics:\u0027},\n  xAxis: [xAxis],\n  yAxis: [yAxis1, yAxis2, yAxis3],\n  series: series,\n  legend: legend,\n  tooltip: { shared: true }\n});\n\u003c/script\u003e"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 3:15:17 AM",
      "dateFinished": "Aug 21, 2016 3:15:17 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Load Metrics",
      "text": "val apps \u003d sqlContext.sql(\"select distinct service from services where service !\u003d \u0027consul\u0027\").collect().map(x \u003d\u003e (x(0).asInstanceOf[String], x(0).asInstanceOf[String]))\nval app \u003d z.select(\"app\", apps)\nval appTable \u003d app.asInstanceOf[String].replace(\"-\", \"_\")+\"_logs_enriched\"\nval query \u003d \"\"\"\nselect\n  concat(date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027), \u0027:00\u0027) as time,\n  round(avg(cpuuser + cpusys)) as CPUUsed,\n  round(avg(diskbusy)) as DISKUsed,\n  round(avg(memavailable/memtotal)*100) as RAMUsed,\n  round(avg(memavailable)/1000) as MemAvailable,\n  sum(known.requests) as InternalRequests,\n  sum(unknown.requests) as ExternalRequests,\n  sum((known.requests + unknown.requests)) as TotalRequests\nfrom node_monitoring\njoin (\n  select\n    date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time,\n    1 as requests\n  from \"\"\"+appTable+\"\"\"\n  where source_ip is not null or source_ip \u003d \u0027127.0.0.1\u0027\n) known on date_format(node_monitoring.datetime, \u0027yyyy-MM-dd HH:mm\u0027) \u003d known.time\njoin (\n  select \n    date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time,\n    1 as requests\n  from \"\"\"+appTable+\"\"\"\n  where source_ip is null  \n) unknown on date_format(node_monitoring.datetime, \u0027yyyy-MM-dd HH:mm\u0027) \u003d unknown.time\nwhere node_monitoring.node in (\n  select nodes.node from nodes\n  join services on nodes.node \u003d services.node\n  where service \u003d \u0027\"\"\"+app+\"\"\"\u0027 \n)\ngroup by date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027)\norder by time asc\n\"\"\"\nval data1 \u003d sqlContext.sql(query)\nprintln(data1.count)\nz.angularBind(\"data1\", data1.collect())\nz.angularBind(\"data1Schema\", data1.schema)\nz.run(\"20160807-021500_806175985\")",
      "dateUpdated": "Aug 21, 2016 3:17:53 AM",
      "config": {
        "tableHide": false,
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {
          "app": "web-service"
        },
        "forms": {
          "app": {
            "name": "app",
            "displayName": "app",
            "type": "select",
            "defaultValue": "",
            "options": [
              {
                "value": "web-service",
                "displayName": "web-service"
              },
              {
                "value": "web-static",
                "displayName": "web-static"
              }
            ],
            "hidden": false
          }
        }
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160703-224943_2118529814",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\napps: Array[(String, String)] \u003d Array((web-service,web-service), (web-static,web-static))\n\napp: Object \u003d web-service\n\nappTable: String \u003d web_service_logs_enriched\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nquery: String \u003d\n\"\nselect\n  concat(date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027), \u0027:00\u0027) as time,\n  round(avg(cpuuser + cpusys)) as CPUUsed,\n  round(avg(diskbusy)) as DISKUsed,\n  round(avg(memavailable/memtotal)*100) as RAMUsed,\n  round(avg(memavailable)/1000) as MemAvailable,\n  sum(known.requests) as InternalRequests,\n  sum(unknown.requests) as ExternalRequests,\n  sum((known.requests + unknown.requests)) as TotalRequests\nfrom node_monitoring\njoin (\n  select\n    date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time,\n    1 as requests\n  from web_service_logs_enriched\n  where source_ip is not null or source_ip \u003d \u0027127.0.0.1\u0027\n) known on date_format(node_monitoring.datetime, \u0027yyyy-MM-dd HH:mm\u0027) \u003d known.time\njoin (\n  select\n    date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time,\n    1 as requests\n  fro...\ndata1: org.apache.spark.sql.DataFrame \u003d [time: string, CPUUsed: double ... 6 more fields]\n0\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 3:16:12 AM",
      "dateFinished": "Aug 21, 2016 3:16:21 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Enterprise-Wide Application Metrics",
      "text": "%angular\n\u003cdiv id\u003d\"chart1\" title\u003d\"Node Metrics\" data\u003d\"data1\" yAxes\u003d\"MemAvail,Percentage Consumed,HTTP Requests\" height\u003d\"400px\" width\u003d\"2000\"\u003e\u003c/div\u003e\n\u003cinput id\u003d\"x0\" type\u003d\"text\" ng-model\u003d\"x0\" class\u003d\"hide\"\u003e\u003c/input\u003e\n\u003cinput id\u003d\"x1\" type\u003d\"text\" ng-model\u003d\"x1\" class\u003d\"hide\"\u003e\u003c/input\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\nvar div \u003d $(\u0027#chart1\u0027);\nvar data \u003d window.angularVars[div.attr(\u0027data\u0027)];\nvar schema \u003d window.angularVars[div.attr(\u0027data\u0027)+\u0027Schema\u0027];\n\n//Convert query results into Plotly traces: https://plot.ly/javascript/multiple-axes/#multiple-yaxes\nvar traces \u003d [];\n$.each(schema.fields.slice(1), function(i, field){ //Setup trace metadata\n  var trace \u003d {x: [], y: [], name: field.name, type: \u0027scatter\u0027, yaxis: \u0027y\u0027};\n  if (field.name.toLowerCase().indexOf(\u0027used\u0027) \u003e 0) trace.yaxis \u003d \u0027y2\u0027;\n  else if (field.name.toLowerCase().indexOf(\u0027requests\u0027) \u003e 0) trace.yaxis \u003d \u0027y3\u0027;\n  traces.push(trace);\n});\n//Load query results into trace arrays\n$.each(data, function(i,row){\n  //First value is a date\n  var date \u003d new Date(row.values[0]);\n  $.each(row.values.slice(1), function(v, cell){\n    traces[v].x.push(date);\n    traces[v].y.push(cell);\n  });\n});\n\nvar layout \u003d { title: \u0027MultiHost App View\u0027, legend: {orientation: \u0027h\u0027}};\n$.each(div.attr(\u0027yAxes\u0027).split(\u0027,\u0027), function(i, v){\n  var axis \u003d {title: v};\n  var key \u003d \u0027yaxis\u0027;\n  if (i \u003e 0){\n    key +\u003d i+1;\n    axis.side \u003d \u0027right\u0027;\n    axis.overlaying \u003d \u0027y\u0027;\n    axis.position \u003d 1-.04*(i-1);\n  }\n  layout[key] \u003d axis;\n});\n\nvar config \u003d {displaylogo: div.attr(\u0027showLinks\u0027), showLinks: div.attr(\u0027showLinks\u0027), modeBarButtonsToRemove: [\u0027sendDataToCloud\u0027]};\nPlotly.newPlot(\u0027chart1\u0027, traces, layout, config);\ndebugger;\n\ndiv.bind(\u0027plotly_relayout\u0027, function(event,eventdata){\n  alert(new Date(eventdata[\u0027xaxis.range[0]\u0027]) + \u0027\\n\u0027 + new Date(eventdata[\u0027xaxis.range[1]\u0027]));\n  /*\n  $(\u0027#x0\u0027).val(new Date(eventdata[\u0027xaxis.range[0]\u0027]));\n  $(\u0027#x1\u0027).val(new Date(eventdata[\u0027xaxis.range[1]\u0027]));\n  $(\u0027#x0\u0027).trigger(\u0027input\u0027);\n  $(\u0027#x1\u0027).trigger(\u0027input\u0027);\n  */\n});\n\u003c/script\u003e",
      "dateUpdated": "Aug 21, 2016 2:24:35 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "editorHide": false,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160807-021500_806175985",
      "result": {
        "code": "SUCCESS",
        "type": "ANGULAR",
        "msg": "\u003cdiv id\u003d\"chart1\" title\u003d\"Node Metrics\" data\u003d\"data1\" yAxes\u003d\"MemAvail,Percentage Consumed,HTTP Requests\" height\u003d\"400px\" width\u003d\"2000\"\u003e\u003c/div\u003e\n\u003cinput id\u003d\"x0\" type\u003d\"text\" ng-model\u003d\"x0\" class\u003d\"hide\"\u003e\u003c/input\u003e\n\u003cinput id\u003d\"x1\" type\u003d\"text\" ng-model\u003d\"x1\" class\u003d\"hide\"\u003e\u003c/input\u003e\n\u003cscript type\u003d\"text/javascript\"\u003e\nvar div \u003d $(\u0027#chart1\u0027);\nvar data \u003d window.angularVars[div.attr(\u0027data\u0027)];\nvar schema \u003d window.angularVars[div.attr(\u0027data\u0027)+\u0027Schema\u0027];\n\n//Convert query results into Plotly traces: https://plot.ly/javascript/multiple-axes/#multiple-yaxes\nvar traces \u003d [];\n$.each(schema.fields.slice(1), function(i, field){ //Setup trace metadata\n  var trace \u003d {x: [], y: [], name: field.name, type: \u0027scatter\u0027, yaxis: \u0027y\u0027};\n  if (field.name.toLowerCase().indexOf(\u0027used\u0027) \u003e 0) trace.yaxis \u003d \u0027y2\u0027;\n  else if (field.name.toLowerCase().indexOf(\u0027requests\u0027) \u003e 0) trace.yaxis \u003d \u0027y3\u0027;\n  traces.push(trace);\n});\n//Load query results into trace arrays\n$.each(data, function(i,row){\n  //First value is a date\n  var date \u003d new Date(row.values[0]);\n  $.each(row.values.slice(1), function(v, cell){\n    traces[v].x.push(date);\n    traces[v].y.push(cell);\n  });\n});\n\nvar layout \u003d { title: \u0027MultiHost App View\u0027, legend: {orientation: \u0027h\u0027}};\n$.each(div.attr(\u0027yAxes\u0027).split(\u0027,\u0027), function(i, v){\n  var axis \u003d {title: v};\n  var key \u003d \u0027yaxis\u0027;\n  if (i \u003e 0){\n    key +\u003d i+1;\n    axis.side \u003d \u0027right\u0027;\n    axis.overlaying \u003d \u0027y\u0027;\n    axis.position \u003d 1-.04*(i-1);\n  }\n  layout[key] \u003d axis;\n});\n\nvar config \u003d {displaylogo: div.attr(\u0027showLinks\u0027), showLinks: div.attr(\u0027showLinks\u0027), modeBarButtonsToRemove: [\u0027sendDataToCloud\u0027]};\nPlotly.newPlot(\u0027chart1\u0027, traces, layout, config);\ndebugger;\n\ndiv.bind(\u0027plotly_relayout\u0027, function(event,eventdata){\n  alert(new Date(eventdata[\u0027xaxis.range[0]\u0027]) + \u0027\\n\u0027 + new Date(eventdata[\u0027xaxis.range[1]\u0027]));\n  /*\n  $(\u0027#x0\u0027).val(new Date(eventdata[\u0027xaxis.range[0]\u0027]));\n  $(\u0027#x1\u0027).val(new Date(eventdata[\u0027xaxis.range[1]\u0027]));\n  $(\u0027#x0\u0027).trigger(\u0027input\u0027);\n  $(\u0027#x1\u0027).trigger(\u0027input\u0027);\n  */\n});\n\u003c/script\u003e"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 3:16:21 AM",
      "dateFinished": "Aug 21, 2016 3:16:21 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Timestamped Host Process Metadata",
      "text": "%sql select * from ps_raw limit 5",
      "dateUpdated": "Aug 21, 2016 2:24:35 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "node",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "ts",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "node",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "ts",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160810-044954_1805943913",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "node\tts\tuser\tpid\tCPU\tMem\tVSZ\tRSS\tTTY\tSTAT\tStart\tTime\tCommand\n01705047a658\t1471736\troot\t1\t0.0\t0.0\t11640\t1448\t?\tSs\t23:35\t0:00\tsh /scripts/start.sh\n01705047a658\t1471736\troot\t21\t0.0\t0.0\t93668\t9680\t?\tS\t23:35\t0:00\tpython /server.py 8000\n01705047a658\t1471736\troot\t25\t0.1\t0.0\t402552\t4600\t?\tSl\t23:36\t0:00\t\n01705047a658\t1471736\troot\t26\t0.0\t0.0\t11636\t1396\t?\tS\t23:36\t0:00\tsh /scripts/ps.sh\n01705047a658\t1471736\troot\t27\t0.0\t0.0\t11636\t1392\t?\tS\t23:36\t0:00\tsh /scripts/netstat.sh\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 2:24:39 AM",
      "dateFinished": "Aug 21, 2016 2:25:12 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Heaviest Processes by CPU",
      "text": "%sql\nselect * from (\nselect node, split(command, \u0027 \u0027)[0], avg(cpu) as avg\nfrom ps_raw\ngroup by node, split(command, \u0027 \u0027)[0]\norder by avg desc\n) a\nwhere avg \u003e 0",
      "dateUpdated": "Aug 21, 2016 2:24:35 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": true,
        "helium": {},
        "title": true,
        "graph": {
          "mode": "pieChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "split(command,  )[0]",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "avg",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [
            {
              "name": "node",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "scatter": {
            "xAxis": {
              "name": "node",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "split(command,  )[0]",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160810-125443_900198444",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "node\tsplit(command,  )[0]\tavg\ncb27db12062a\tconsul\t0.7227497527201092\n01705047a658\tconsul\t0.7158989598811575\n01705047a658\t\t0.10296589223924488\ncb27db12062a\t\t0.10202569169960106\ncb27db12062a\tnetstat\t0.058823529411764705\n01705047a658\tpython\t3.96235760277365E-4\ncb27db12062a\tpython\t3.4619188921859544E-4\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 2:24:42 AM",
      "dateFinished": "Aug 21, 2016 2:26:15 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Timestamped Host Network Activity",
      "text": "%sql select * from netstat_raw limit 5",
      "dateUpdated": "Aug 21, 2016 2:24:35 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": true,
        "title": true,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "node",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "ts",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "node",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "ts",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216527_234748010",
      "id": "20160810-053759_255179982",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "node\tts\tProto\tRecvQ\tSendQ\tLocalAddress\tForeignAddress\tState\tUser\tInode\tpid\tProgramName\n01705047a658\t1471736\ttcp\t0\t0\tlocalhost:cvd\t0.0.0.0:*\tLISTEN\troot\t18315091\t\t\n01705047a658\t1471736\ttcp\t0\t0\tlocalhost:fmtp\t0.0.0.0:*\tLISTEN\troot\t18315092\t\t\n01705047a658\t1471736\ttcp\t0\t0\tlocalhost:asterix\t0.0.0.0:*\tLISTEN\troot\t18315098\t\t\n01705047a658\t1471736\ttcp\t0\t0\t127.0.0.11:43516\t0.0.0.0:*\tLISTEN\troot\t18313794\t\t\n01705047a658\t1471736\ttcp\t0\t0\t0.0.0.0:irdmi\t0.0.0.0:*\tLISTEN\troot\t18313102\t\t\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 2:25:13 AM",
      "dateFinished": "Aug 21, 2016 2:26:47 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "title": "Most Frequent Net Activity by Host",
      "text": "%sql\nselect node, foreignaddress, count(*) as count\nfrom netstat_raw group by node, foreignaddress\norder by count desc\nlimit 15",
      "dateUpdated": "Aug 21, 2016 2:24:35 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "editorHide": true,
        "helium": {},
        "title": true,
        "graph": {
          "mode": "multiBarChart",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "foreignaddress",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "count",
              "index": 2.0,
              "aggr": "sum"
            }
          ],
          "groups": [
            {
              "name": "node",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "scatter": {
            "yAxis": {
              "name": "count",
              "index": 2.0,
              "aggr": "sum"
            },
            "group": {
              "name": "foreignaddress",
              "index": 1.0,
              "aggr": "sum"
            },
            "xAxis": {
              "name": "node",
              "index": 0.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216528_245136231",
      "id": "20160810-124941_1867977815",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "node\tforeignaddress\tcount\ncb27db12062a\t0.0.0.0:*\t14179\n01705047a658\t0.0.0.0:*\t14160\ncb27db12062a\t[::]:*\t10130\n01705047a658\t[::]:*\t10115\n01705047a658\tlocalhost:irdmi\t6406\ncb27db12062a\tlocalhost:irdmi\t6309\ncb27db12062a\ttechops_monitor.dev_1.techops_dev:38464\t2025\ncb27db12062a\ttechops_monitor.dev_1.techops_dev:38466\t2025\ncb27db12062a\ttechops_monitor.dev_1.techops_dev:cap\t2025\n01705047a658\ttechops_monitor.dev_1.techops_dev:39582\t2023\ncb27db12062a\ttechops_monitor.dev_1.techops_dev:tmi\t2022\n01705047a658\ttechops_monitor.dev_1.techops_dev:cap\t2022\n01705047a658\ttechops_monitor.dev_1.techops_dev:39590\t2022\n01705047a658\ttechops_monitor.dev_1.techops_dev:tmi\t2019\ncb27db12062a\ttechops_monitor.dev_1.techops_dev:amberon\t980\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 2:26:15 AM",
      "dateFinished": "Aug 21, 2016 2:27:49 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "import org.apache.zeppelin.display.angular.notebookscope._\nimport AngularElem._",
      "dateUpdated": "Aug 21, 2016 2:24:35 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/scala",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216528_245136231",
      "id": "20160810-125144_1208192331",
      "result": {
        "code": "SUCCESS",
        "type": "TEXT",
        "msg": "\nimport org.apache.zeppelin.display.angular.notebookscope._\n\nimport AngularElem._\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 2:26:47 AM",
      "dateFinished": "Aug 21, 2016 2:27:50 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\nselect\n  concat(date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027), \u0027:00\u0027) as time,\n  round(avg(cpuuser + cpusys)) as CPUUsed,\n  round(avg(diskbusy)) as DISKUsed,\n  round(avg(memavailable/memtotal)*100) as RAMUsed,\n  round(avg(memavailable)/1000) as MemAvailable\n  sum(known.requests) as InternalRequests,\n  sum(unknown.requests) as ExternalRequests,\n  sum((known.requests + unknown.requests)) as TotalRequests\nfrom node_monitoring\njoin (\n  select\n    date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time,\n    1 as requests\n  from web_service_logs_enriched\n  where source_ip is not null or source_ip \u003d \u0027127.0.0.1\u0027\n) known on date_format(node_monitoring.datetime, \u0027yyyy-MM-dd HH:mm\u0027) \u003d known.time\njoin (\n  select \n    date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time,\n    1 as requests\n  from web_service_logs_enriched\n  where source_ip is null  \n) unknown on date_format(node_monitoring.datetime, \u0027yyyy-MM-dd HH:mm\u0027) \u003d unknown.time\nwhere node_monitoring.node in (\n  select nodes.node from nodes\n  join services on nodes.node \u003d services.node\n  where service \u003d \u0027web_service\u0027 \n)\ngroup by date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027)\norder by time asc",
      "dateUpdated": "Aug 21, 2016 2:34:52 AM",
      "config": {
        "colWidth": 12.0,
        "editorMode": "ace/mode/sql",
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "time",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "CPUUsed",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "time",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "CPUUsed",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471482216528_245136231",
      "id": "20160815-124555_255216493",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "time\tCPUUsed\tDISKUsed\tRAMUsed\tMemAvailable\n2016-08-20 23:36:00\t11.0\t9.0\t92.0\t30098.0\n2016-08-20 23:37:00\t36.0\t80.0\t90.0\t29382.0\n2016-08-20 23:38:00\t9.0\t19.0\t89.0\t29095.0\n2016-08-20 23:39:00\t9.0\t9.0\t89.0\t29097.0\n2016-08-20 23:40:00\t8.0\t5.0\t89.0\t29095.0\n2016-08-20 23:41:00\t8.0\t11.0\t89.0\t29101.0\n2016-08-20 23:42:00\t9.0\t18.0\t89.0\t29101.0\n2016-08-20 23:43:00\t9.0\t11.0\t89.0\t29074.0\n2016-08-20 23:44:00\t8.0\t12.0\t89.0\t29056.0\n2016-08-20 23:45:00\t8.0\t10.0\t89.0\t29042.0\n2016-08-20 23:46:00\t10.0\t6.0\t89.0\t29042.0\n2016-08-20 23:47:00\t10.0\t6.0\t89.0\t29041.0\n2016-08-20 23:48:00\t10.0\t9.0\t88.0\t29005.0\n2016-08-20 23:49:00\t9.0\t4.0\t88.0\t28979.0\n2016-08-20 23:50:00\t8.0\t4.0\t88.0\t28954.0\n2016-08-20 23:51:00\t8.0\t8.0\t88.0\t28939.0\n2016-08-20 23:52:00\t9.0\t10.0\t88.0\t28939.0\n2016-08-20 23:53:00\t8.0\t7.0\t88.0\t28936.0\n2016-08-20 23:54:00\t9.0\t8.0\t88.0\t28935.0\n2016-08-20 23:55:00\t9.0\t14.0\t88.0\t28923.0\n2016-08-20 23:56:00\t11.0\t7.0\t88.0\t28924.0\n2016-08-20 23:57:00\t13.0\t9.0\t88.0\t28923.0\n2016-08-20 23:58:00\t10.0\t24.0\t88.0\t28921.0\n2016-08-20 23:59:00\t8.0\t16.0\t88.0\t28905.0\n2016-08-21 00:00:00\t8.0\t21.0\t88.0\t28878.0\n2016-08-21 00:01:00\t8.0\t9.0\t88.0\t28879.0\n2016-08-21 00:02:00\t8.0\t15.0\t88.0\t28878.0\n2016-08-21 00:03:00\t7.0\t1.0\t88.0\t28878.0\n2016-08-21 00:04:00\t7.0\t3.0\t88.0\t28878.0\n2016-08-21 00:05:00\t8.0\t12.0\t88.0\t28877.0\n2016-08-21 00:06:00\t8.0\t4.0\t88.0\t28877.0\n2016-08-21 00:07:00\t9.0\t1.0\t88.0\t28866.0\n2016-08-21 00:08:00\t9.0\t4.0\t88.0\t28870.0\n2016-08-21 00:09:00\t7.0\t2.0\t88.0\t28870.0\n2016-08-21 00:10:00\t7.0\t2.0\t88.0\t28867.0\n2016-08-21 00:11:00\t7.0\t4.0\t88.0\t28856.0\n2016-08-21 00:12:00\t8.0\t2.0\t88.0\t28847.0\n2016-08-21 00:13:00\t8.0\t2.0\t88.0\t28831.0\n2016-08-21 00:14:00\t8.0\t2.0\t88.0\t28824.0\n2016-08-21 00:15:00\t9.0\t0.0\t88.0\t28813.0\n2016-08-21 00:16:00\t7.0\t3.0\t88.0\t28802.0\n2016-08-21 00:17:00\t8.0\t0.0\t88.0\t28801.0\n2016-08-21 00:18:00\t9.0\t0.0\t88.0\t28800.0\n2016-08-21 00:19:00\t9.0\t0.0\t88.0\t28801.0\n2016-08-21 00:20:00\t7.0\t0.0\t88.0\t28801.0\n2016-08-21 00:21:00\t7.0\t0.0\t88.0\t28801.0\n2016-08-21 00:22:00\t9.0\t0.0\t88.0\t28800.0\n2016-08-21 00:23:00\t7.0\t2.0\t88.0\t28801.0\n2016-08-21 00:24:00\t8.0\t2.0\t88.0\t28800.0\n2016-08-21 00:25:00\t8.0\t0.0\t88.0\t28800.0\n2016-08-21 00:26:00\t7.0\t0.0\t88.0\t28800.0\n2016-08-21 00:27:00\t7.0\t4.0\t88.0\t28801.0\n2016-08-21 00:28:00\t52.0\t21.0\t88.0\t28779.0\n2016-08-21 00:29:00\t10.0\t0.0\t88.0\t28771.0\n2016-08-21 00:30:00\t7.0\t4.0\t88.0\t28771.0\n2016-08-21 00:31:00\t14.0\t16.0\t88.0\t28763.0\n2016-08-21 00:32:00\t7.0\t4.0\t88.0\t28760.0\n2016-08-21 00:33:00\t8.0\t7.0\t88.0\t28761.0\n2016-08-21 00:34:00\t8.0\t1.0\t88.0\t28761.0\n2016-08-21 00:35:00\t8.0\t0.0\t88.0\t28760.0\n2016-08-21 00:36:00\t7.0\t2.0\t88.0\t28759.0\n2016-08-21 00:37:00\t7.0\t15.0\t88.0\t28739.0\n2016-08-21 00:38:00\t8.0\t1.0\t88.0\t28739.0\n2016-08-21 00:39:00\t9.0\t19.0\t88.0\t28739.0\n2016-08-21 00:40:00\t9.0\t2.0\t88.0\t28739.0\n2016-08-21 00:41:00\t7.0\t2.0\t88.0\t28742.0\n2016-08-21 00:42:00\t7.0\t10.0\t88.0\t28736.0\n2016-08-21 00:43:00\t7.0\t4.0\t88.0\t28737.0\n2016-08-21 00:44:00\t8.0\t0.0\t88.0\t28737.0\n2016-08-21 00:45:00\t7.0\t0.0\t88.0\t28737.0\n2016-08-21 00:46:00\t7.0\t0.0\t88.0\t28737.0\n2016-08-21 00:47:00\t7.0\t0.0\t88.0\t28734.0\n2016-08-21 00:48:00\t7.0\t0.0\t88.0\t28734.0\n2016-08-21 00:49:00\t91.0\t0.0\t89.0\t29051.0\n2016-08-21 00:50:00\t10.0\t0.0\t88.0\t28802.0\n2016-08-21 00:51:00\t7.0\t0.0\t88.0\t28805.0\n2016-08-21 00:52:00\t7.0\t0.0\t88.0\t28803.0\n2016-08-21 00:53:00\t7.0\t9.0\t88.0\t28803.0\n2016-08-21 00:54:00\t7.0\t4.0\t88.0\t28803.0\n2016-08-21 00:55:00\t9.0\t0.0\t88.0\t28803.0\n2016-08-21 00:56:00\t7.0\t0.0\t88.0\t28804.0\n2016-08-21 00:57:00\t7.0\t0.0\t88.0\t28803.0\n2016-08-21 00:58:00\t7.0\t0.0\t88.0\t28802.0\n2016-08-21 00:59:00\t9.0\t0.0\t88.0\t28799.0\n2016-08-21 01:00:00\t8.0\t1.0\t88.0\t28787.0\n2016-08-21 01:01:00\t7.0\t0.0\t88.0\t28780.0\n2016-08-21 01:02:00\t7.0\t0.0\t88.0\t28766.0\n2016-08-21 01:03:00\t7.0\t0.0\t88.0\t28763.0\n2016-08-21 01:04:00\t7.0\t0.0\t88.0\t28761.0\n2016-08-21 01:05:00\t7.0\t0.0\t88.0\t28756.0\n2016-08-21 01:06:00\t8.0\t0.0\t88.0\t28749.0\n2016-08-21 01:07:00\t8.0\t0.0\t88.0\t28751.0\n2016-08-21 01:08:00\t8.0\t0.0\t88.0\t28750.0\n2016-08-21 01:09:00\t11.0\t12.0\t88.0\t28695.0\n2016-08-21 01:10:00\t9.0\t0.0\t88.0\t28696.0\n2016-08-21 01:11:00\t8.0\t0.0\t88.0\t28696.0\n2016-08-21 01:12:00\t6.0\t0.0\t88.0\t28696.0\n2016-08-21 01:13:00\t8.0\t0.0\t88.0\t28696.0\n2016-08-21 01:14:00\t7.0\t0.0\t88.0\t28696.0\n2016-08-21 01:15:00\t7.0\t17.0\t88.0\t28695.0\n2016-08-21 01:16:00\t8.0\t4.0\t88.0\t28695.0\n2016-08-21 01:17:00\t8.0\t31.0\t88.0\t28695.0\n2016-08-21 01:18:00\t8.0\t5.0\t88.0\t28695.0\n2016-08-21 01:19:00\t8.0\t0.0\t87.0\t28679.0\n2016-08-21 01:20:00\t9.0\t0.0\t88.0\t28680.0\n2016-08-21 01:21:00\t8.0\t0.0\t88.0\t28681.0\n2016-08-21 01:22:00\t7.0\t0.0\t87.0\t28680.0\n2016-08-21 01:23:00\t8.0\t0.0\t88.0\t28681.0\n2016-08-21 01:24:00\t7.0\t0.0\t88.0\t28681.0\n2016-08-21 01:25:00\t8.0\t0.0\t87.0\t28680.0\n2016-08-21 01:26:00\t8.0\t0.0\t87.0\t28678.0\n2016-08-21 01:27:00\t7.0\t0.0\t87.0\t28676.0\n2016-08-21 01:28:00\t7.0\t0.0\t87.0\t28653.0\n2016-08-21 01:29:00\t8.0\t0.0\t87.0\t28647.0\n2016-08-21 01:30:00\t8.0\t4.0\t87.0\t28648.0\n"
      },
      "dateCreated": "Aug 17, 2016 9:03:36 AM",
      "dateStarted": "Aug 21, 2016 2:34:16 AM",
      "dateFinished": "Aug 21, 2016 2:34:17 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n  select\n    date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time,\n    count(1) as requests\n  from web_service_logs_enriched\n    where source_ip is not null or source_ip \u003d \u0027127.0.0.1\u0027\n  group by date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027)\n\n  ",
      "dateUpdated": "Aug 21, 2016 2:37:09 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "time",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "requests",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "time",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "requests",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471746738977_750124544",
      "id": "20160821-023218_813437982",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "time\trequests\n2016-08-20 23:44\t12\n2016-08-21 01:26\t12\n2016-08-21 01:03\t12\n2016-08-21 00:25\t12\n2016-08-21 01:21\t12\n2016-08-20 23:46\t12\n2016-08-21 00:19\t12\n2016-08-21 01:28\t12\n2016-08-20 23:42\t12\n2016-08-20 23:55\t12\n2016-08-21 00:39\t12\n2016-08-21 01:02\t12\n2016-08-21 00:34\t12\n2016-08-21 00:31\t12\n2016-08-21 00:57\t12\n2016-08-20 23:59\t12\n2016-08-21 00:33\t12\n2016-08-21 01:01\t12\n2016-08-21 00:02\t12\n2016-08-21 00:44\t12\n2016-08-21 00:04\t12\n2016-08-21 00:49\t12\n2016-08-21 00:46\t12\n2016-08-21 00:10\t12\n2016-08-21 01:27\t12\n2016-08-21 00:41\t12\n2016-08-21 01:07\t12\n2016-08-21 00:53\t12\n2016-08-21 01:30\t12\n2016-08-20 23:40\t12\n2016-08-21 00:12\t11\n2016-08-21 00:24\t12\n2016-08-20 23:45\t12\n2016-08-20 23:54\t12\n2016-08-21 00:21\t12\n2016-08-21 01:18\t12\n2016-08-20 23:53\t12\n2016-08-21 00:56\t12\n2016-08-20 23:36\t11\n2016-08-20 23:49\t12\n2016-08-21 00:00\t12\n2016-08-21 01:23\t12\n2016-08-21 01:06\t12\n2016-08-21 00:36\t12\n2016-08-21 00:50\t12\n2016-08-21 00:52\t12\n2016-08-21 00:16\t12\n2016-08-21 00:27\t12\n2016-08-21 00:54\t12\n2016-08-21 00:35\t12\n2016-08-20 23:50\t12\n2016-08-21 00:17\t12\n2016-08-20 23:39\t12\n2016-08-21 00:18\t12\n2016-08-21 00:59\t12\n2016-08-21 00:05\t12\n2016-08-21 01:14\t12\n2016-08-21 00:14\t12\n2016-08-21 00:32\t12\n2016-08-21 01:11\t12\n2016-08-20 23:48\t12\n2016-08-21 00:42\t12\n2016-08-21 01:04\t12\n2016-08-20 23:43\t12\n2016-08-21 00:47\t12\n2016-08-21 00:15\t12\n2016-08-20 23:58\t12\n2016-08-21 00:38\t12\n2016-08-21 00:51\t12\n2016-08-21 01:22\t12\n2016-08-21 01:17\t12\n2016-08-21 01:09\t12\n2016-08-21 00:30\t12\n2016-08-21 00:11\t12\n2016-08-21 00:43\t12\n2016-08-21 00:22\t12\n2016-08-21 01:15\t12\n2016-08-21 01:12\t12\n2016-08-21 00:55\t12\n2016-08-21 01:00\t12\n2016-08-21 00:08\t12\n2016-08-21 00:07\t12\n2016-08-21 00:58\t12\n2016-08-21 01:05\t12\n2016-08-21 00:09\t12\n2016-08-21 01:19\t12\n2016-08-20 23:51\t12\n2016-08-21 00:28\t12\n2016-08-21 00:01\t12\n2016-08-21 00:03\t12\n2016-08-20 23:38\t12\n2016-08-21 01:24\t12\n2016-08-21 00:23\t12\n2016-08-21 00:48\t12\n2016-08-21 01:08\t12\n2016-08-20 23:52\t12\n2016-08-20 23:56\t12\n2016-08-21 01:31\t12\n2016-08-21 00:06\t12\n2016-08-21 00:29\t12\n2016-08-20 23:47\t12\n2016-08-21 00:26\t12\n2016-08-21 00:37\t12\n2016-08-20 23:37\t12\n2016-08-21 01:16\t12\n2016-08-21 01:13\t12\n2016-08-21 00:45\t12\n2016-08-21 00:40\t12\n2016-08-21 00:13\t12\n2016-08-21 01:25\t12\n2016-08-21 01:20\t12\n2016-08-20 23:57\t12\n2016-08-21 00:20\t12\n2016-08-20 23:41\t12\n2016-08-21 01:29\t12\n2016-08-21 01:10\t12\n"
      },
      "dateCreated": "Aug 21, 2016 2:32:18 AM",
      "dateStarted": "Aug 21, 2016 2:37:09 AM",
      "dateFinished": "Aug 21, 2016 2:37:09 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n  select max(time) as max, min(time) as min, \u0027nodes\u0027 as type from (\n    select date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time\n    from node_monitoring\n  ) a",
      "dateUpdated": "Aug 21, 2016 2:38:52 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "time",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "metrics",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "time",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "metrics",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471746916767_1676877375",
      "id": "20160821-023516_1012704520",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "max\tmin\ttype\n2016-08-21 01:30\t2016-08-20 23:36\tnodes\n"
      },
      "dateCreated": "Aug 21, 2016 2:35:16 AM",
      "dateStarted": "Aug 21, 2016 2:38:52 AM",
      "dateFinished": "Aug 21, 2016 2:38:52 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "%sql\n  select max(time) as max, min(time) as min, \u0027web\u0027 as type from (\n    select date_format(datetime, \u0027yyyy-MM-dd HH:mm\u0027) as time\n    from web_service_logs_enriched\n  ) a",
      "dateUpdated": "Aug 21, 2016 2:39:34 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [
            {
              "name": "max",
              "index": 0.0,
              "aggr": "sum"
            }
          ],
          "values": [
            {
              "name": "min",
              "index": 1.0,
              "aggr": "sum"
            }
          ],
          "groups": [],
          "scatter": {
            "xAxis": {
              "name": "max",
              "index": 0.0,
              "aggr": "sum"
            },
            "yAxis": {
              "name": "min",
              "index": 1.0,
              "aggr": "sum"
            }
          }
        },
        "enabled": true,
        "editorMode": "ace/mode/sql"
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471747062821_-634542420",
      "id": "20160821-023742_1471612820",
      "result": {
        "code": "SUCCESS",
        "type": "TABLE",
        "msg": "max\tmin\ttype\n2016-08-21 01:31\t2016-08-20 23:36\tweb\n"
      },
      "dateCreated": "Aug 21, 2016 2:37:42 AM",
      "dateStarted": "Aug 21, 2016 2:39:34 AM",
      "dateFinished": "Aug 21, 2016 2:39:34 AM",
      "status": "FINISHED",
      "progressUpdateIntervalMs": 500
    },
    {
      "text": "",
      "dateUpdated": "Aug 21, 2016 2:39:24 AM",
      "config": {
        "colWidth": 12.0,
        "graph": {
          "mode": "table",
          "height": 300.0,
          "optionOpen": false,
          "keys": [],
          "values": [],
          "groups": [],
          "scatter": {}
        },
        "enabled": true
      },
      "settings": {
        "params": {},
        "forms": {}
      },
      "jobName": "paragraph_1471747154065_372515662",
      "id": "20160821-023914_380584805",
      "dateCreated": "Aug 21, 2016 2:39:14 AM",
      "status": "READY",
      "progressUpdateIntervalMs": 500
    }
  ],
  "name": "DeviceRegistry",
  "id": "2BVACAUE9",
  "angularObjects": {
    "2BU5KQMZJ:shared_process": [],
    "2BSXST5Z5:shared_process": [],
    "2BUZU6GVF:shared_process": [],
    "2BW7ESVB3:shared_process": [],
    "2BU34H24G:shared_process": [],
    "2BU5XGSRQ:shared_process": [],
    "2BTA3FUNF:shared_process": [],
    "2BTSWA8Z1:shared_process": [],
    "2BUBABM3W:shared_process": [],
    "2BTQU3FKV:shared_process": [],
    "2BVQ1NBDV:shared_process": [],
    "2BUD3AHMW:shared_process": [],
    "2BUDHWEBS:shared_process": [
      {
        "name": "data2Schema",
        "object": {
          "fields": [
            {
              "name": "time",
              "dataType": {
                "ordering": {}
              },
              "nullable": false,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "Disk",
              "dataType": {
                "ordering": {}
              },
              "nullable": false,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "CPUUser",
              "dataType": {
                "ordering": {}
              },
              "nullable": false,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "CPUSys",
              "dataType": {
                "ordering": {}
              },
              "nullable": false,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "CPU",
              "dataType": {
                "ordering": {}
              },
              "nullable": false,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "Mem",
              "dataType": {
                "ordering": {}
              },
              "nullable": false,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "AppEvents",
              "dataType": {
                "ordering": {}
              },
              "nullable": false,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "MemAvail",
              "dataType": {
                "ordering": {}
              },
              "nullable": false,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            }
          ],
          "_hashCode": 0.0,
          "bitmap$0": 0.0
        },
        "noteId": "2BVACAUE9"
      },
      {
        "name": "data2",
        "object": [
          {
            "schema": {
              "fields": [
                {
                  "name": "time",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": false,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "Disk",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": false,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "CPUUser",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": false,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "CPUSys",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": false,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "CPU",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": false,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "Mem",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": false,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "AppEvents",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": false,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                },
                {
                  "name": "MemAvail",
                  "dataType": {
                    "ordering": {}
                  },
                  "nullable": false,
                  "metadata": {
                    "map": {},
                    "_hashCode": -1.60932692E9,
                    "bitmap$0": true
                  }
                }
              ],
              "_hashCode": -2.70940025E8,
              "bitmap$0": 8.0
            },
            "values": [
              "00:17,23:36,00:18,23:37,00:19,23:38,00:20,23:39,00:21,23:40,00:22,23:41,00:23,23:42,00:24,23:43,00:25,23:44,00:26,23:45,00:32,23:46,00:33,23:47,00:34,23:48,00:35,23:49,00:36,23:50,00:37,23:51,00:38,23:52,00:39,23:53,00:40,23:54,00:41,23:55,00:42,23:56,00:44,23:57,00:43,23:58,00:45,23:59,00:46,00:00,00:47,00:01,00:48,00:02,00:49,00:03,00:50,00:04,00:51,00:05,00:52,00:06,00:53,00:07,00:54,00:08,00:55,00:09,00:56,00:10,00:57,00:11,00:58,00:12,00:59,00:13,01:00,00:14,01:01,00:15,01:02,00:16,00:27,01:03,00:28,01:04,00:29,01:05,00:30,01:06,00:31,01:07,01:08,01:09,01:10,01:11,01:12,01:13,01:14,01:15,01:16,01:17,01:18,01:19,01:20,01:21,01:22,01:23,01:24,01:25,01:26,01:27,01:28,01:29,01:30",
              "0.0,8.8,0.0,80.3,0.0,19.3,0.0,8.7,0.0,5.3,0.0,11.4,1.8,18.4,1.8,11.4,0.0,12.3,0.0,9.7,3.5,6.1,5.3,5.3,0.9,9.6,0.0,5.3,1.8,5.3,15.0,8.8,0.9,11.3,19.4,7.9,1.8,8.7,1.8,16.6,9.7,6.9,0.0,8.7,4.4,23.7,0.0,15.9,0.0,21.2,0.0,8.8,0.0,12.3,0.0,0.9,0.0,4.4,0.0,11.5,0.0,4.4,8.8,0.9,4.4,3.5,0.0,1.8,0.0,1.8,0.0,3.5,0.0,1.8,0.0,1.8,0.0,0.0,0.0,0.0,0.0,2.7,4.4,0.0,20.4,0.0,0.0,0.0,4.4,0.0,13.9,0.0,0.0,15.9,0.0,0.0,0.0,0.0,0.0,16.8,4.4,30.9,5.3,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,4.4",
              "3.4,4.0,3.6,29.7,3.6,3.8,3.1,2.9,2.7,2.7,3.8,2.7,3.1,3.5,4.0,3.1,2.9,2.7,2.5,2.7,2.9,4.0,3.8,3.3,2.7,3.5,2.9,3.3,2.7,3.1,3.1,2.9,3.2,4.0,4.0,3.5,2.7,3.5,2.9,3.6,3.1,4.4,2.9,7.3,2.9,4.0,2.2,3.3,2.7,3.4,3.3,3.6,2.7,2.9,81.9,2.7,3.8,3.1,2.7,3.3,3.1,2.7,2.2,3.6,2.2,3.3,3.6,2.4,2.9,2.4,3.3,2.7,3.1,2.9,3.3,3.4,3.6,4.0,2.2,3.3,2.2,2.9,2.7,3.1,48.2,2.9,3.8,3.6,2.7,3.6,12.4,3.1,3.8,4.9,3.1,3.1,2.0,3.1,2.9,2.3,2.9,3.1,3.1,3.6,3.1,4.1,2.3,3.1,3.1,3.1,3.6,2.9,2.9,2.9,3.2",
              "5.6,7.1,6.5,6.9,6.7,6.0,5.1,6.0,5.4,5.1,5.8,5.8,5.1,5.8,5.6,6.7,5.5,5.8,5.1,5.3,5.3,6.2,5.1,7.1,6.2,6.8,5.6,6.4,5.6,5.8,5.1,5.8,5.9,5.9,6.1,6.0,6.0,6.2,4.9,6.5,5.6,7.5,5.8,7.1,5.6,6.9,5.6,5.8,5.8,5.6,5.1,5.6,5.6,5.6,8.4,4.9,6.9,5.2,5.6,5.8,5.2,5.6,5.4,6.0,5.6,6.0,6.2,5.8,5.4,5.8,5.6,5.6,5.4,5.8,6.7,5.4,5.8,5.1,5.2,6.4,5.6,5.4,5.6,5.4,6.5,5.6,7.1,4.9,5.4,5.6,4.2,5.8,5.5,6.7,6.5,5.4,5.4,5.6,5.8,5.9,6.2,5.4,6.0,6.3,6.7,5.6,5.7,5.6,5.6,5.8,4.9,5.6,5.8,6.0,5.9",
              "9.0,11.1,10.1,36.6,10.3,9.8,8.2,8.9,8.1,7.8,9.6,8.5,8.2,9.3,9.6,9.8,8.4,8.5,7.6,8.0,8.2,10.2,8.9,10.4,8.9,10.3,8.5,9.7,8.3,8.9,8.2,8.7,9.1,9.9,10.1,9.5,8.7,9.7,7.8,10.1,8.7,11.9,8.7,14.4,8.5,10.9,7.8,9.1,8.5,9.0,8.4,9.2,8.3,8.5,90.3,7.6,10.7,8.3,8.3,9.1,8.3,8.3,7.6,9.6,7.8,9.3,9.8,8.2,8.3,8.2,8.9,8.3,8.5,8.7,10.0,8.8,9.4,9.1,7.4,9.7,7.8,8.3,8.3,8.5,54.7,8.5,10.9,8.5,8.1,9.2,16.6,8.9,9.3,11.6,9.6,8.5,7.4,8.7,8.7,8.2,9.1,8.5,9.1,9.9,9.8,9.7,8.0,8.7,8.7,8.9,8.5,8.5,8.7,8.9,9.1",
              "87.87,91.82,87.87,89.64,87.87,88.77,87.87,88.77,87.87,88.76,87.87,88.78,87.87,88.78,87.87,88.7,87.87,88.65,87.87,88.6,87.75,88.6,87.75,88.6,87.75,88.49,87.74,88.41,87.74,88.34,87.68,88.29,87.68,88.29,87.68,88.28,87.68,88.28,87.69,88.24,87.67,88.24,87.67,88.24,87.67,88.23,87.67,88.18,87.68,88.1,87.66,88.11,87.66,88.1,88.63,88.11,87.87,88.11,87.88,88.1,87.88,88.1,87.88,88.07,87.87,88.08,87.88,88.08,87.88,88.07,87.88,88.04,87.87,88.01,87.86,87.96,87.83,87.94,87.8,87.91,87.76,87.87,87.87,87.75,87.8,87.75,87.78,87.73,87.78,87.71,87.75,87.72,87.71,87.55,87.55,87.55,87.55,87.55,87.55,87.55,87.55,87.55,87.54,87.49,87.5,87.5,87.5,87.5,87.5,87.5,87.5,87.49,87.42,87.4,87.4",
              "12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12",
              "28801.0,30098.0,28800.0,29382.0,28802.0,29095.0,28801.0,29096.0,28801.0,29095.0,28800.0,29101.0,28801.0,29101.0,28801.0,29073.0,28800.0,29056.0,28800.0,29042.0,28761.0,29042.0,28761.0,29041.0,28761.0,29005.0,28760.0,28979.0,28760.0,28954.0,28739.0,28939.0,28739.0,28939.0,28740.0,28936.0,28739.0,28936.0,28742.0,28923.0,28736.0,28924.0,28737.0,28924.0,28737.0,28921.0,28737.0,28905.0,28738.0,28878.0,28734.0,28879.0,28734.0,28878.0,29051.0,28879.0,28802.0,28879.0,28805.0,28877.0,28803.0,28877.0,28803.0,28866.0,28802.0,28869.0,28803.0,28870.0,28804.0,28867.0,28803.0,28856.0,28803.0,28847.0,28800.0,28832.0,28787.0,28824.0,28780.0,28814.0,28766.0,28803.0,28802.0,28763.0,28779.0,28761.0,28771.0,28756.0,28771.0,28750.0,28763.0,28751.0,28750.0,28696.0,28696.0,28696.0,28696.0,28696.0,28696.0,28696.0,28695.0,28696.0,28695.0,28678.0,28681.0,28681.0,28680.0,28681.0,28681.0,28680.0,28679.0,28676.0,28653.0,28647.0,28648.0"
            ]
          }
        ],
        "noteId": "2BVACAUE9"
      },
      {
        "name": "data1",
        "object": [],
        "noteId": "2BVACAUE9"
      },
      {
        "name": "data1Schema",
        "object": {
          "fields": [
            {
              "name": "time",
              "dataType": {
                "ordering": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "CPUUsed",
              "dataType": {
                "numeric": {},
                "fractional": {},
                "asIntegral": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "DISKUsed",
              "dataType": {
                "numeric": {},
                "fractional": {},
                "asIntegral": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "RAMUsed",
              "dataType": {
                "numeric": {},
                "fractional": {},
                "asIntegral": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "MemAvailable",
              "dataType": {
                "numeric": {},
                "fractional": {},
                "asIntegral": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "InternalRequests",
              "dataType": {
                "numeric": {},
                "integral": {},
                "ordering": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "ExternalRequests",
              "dataType": {
                "numeric": {},
                "integral": {},
                "ordering": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            },
            {
              "name": "TotalRequests",
              "dataType": {
                "numeric": {},
                "integral": {},
                "ordering": {}
              },
              "nullable": true,
              "metadata": {
                "map": {},
                "_hashCode": -1.60932692E9,
                "bitmap$0": true
              }
            }
          ],
          "_hashCode": 0.0,
          "bitmap$0": 0.0
        },
        "noteId": "2BVACAUE9"
      }
    ],
    "2BVHDGFAH:shared_process": [],
    "2BUE5NMN7:shared_process": [],
    "2BUKFK1HU:shared_process": [],
    "2BV3AQ8YQ:shared_process": [],
    "2BVEAVZZ5:shared_process": []
  },
  "config": {},
  "info": {}
}